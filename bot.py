# bot.py ‚Äî Nature Inspire (Replicate) ‚Äî async resize + double refiner + ESRGAN x4 + safe send

import os
import logging
import replicate
import asyncio
import traceback
import aiohttp
import urllib.request
import tempfile
from PIL import Image

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

# ---------- TOKENS ----------
API_TOKEN  = os.getenv("TELEGRAM_API_TOKEN")
REPL_TOKEN = os.getenv("REPLICATE_API_TOKEN")
if not API_TOKEN:
    raise RuntimeError("TELEGRAM_API_TOKEN")
if not REPL_TOKEN:
    raise RuntimeError("REPLICATE_API_TOKEN")
os.environ["REPLICATE_API_TOKEN"] = REPL_TOKEN  # –¥–ª—è SDK

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ---------- MODELS ----------
MODEL_FLUX    = "black-forest-labs/flux-1.1-pro"
MODEL_REFINER = "fermatresearch/magic-image-refiner:507ddf6f977a7e30e46c0daefd30de7d563c72322f9e4cf7cbac52ef0f667b13"
MODEL_ESRGAN  = "nightmareai/real-esrgan:f121d640bd286e1fdc67f9799164c1d5be36ff74576ee11c803ae5b665dd46aa"
MODEL_SWINIR  = "jingyunliang/swinir:660d922d33153019e8c263a3bba265de882e7f4f70396546b6c9c8f9d47a021a"

# ---------- STATE ----------
WAIT = {}  # user_id -> {'effect': 'nature'|'flux'|'hdr'|'clean'}

# ---------- HELPERS ----------
def tg_public_url(file_path: str) -> str:
    return f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"

async def telegram_file_to_public_url(file_id: str) -> str:
    tg_file = await bot.get_file(file_id)
    return tg_public_url(tg_file.file_path)

def pick_url(output) -> str:
    try:
        if isinstance(output, str):
            return output
        if isinstance(output, (list, tuple)) and output:
            o0 = output[0]
            url_attr = getattr(o0, "url", None)
            return (url_attr() if callable(url_attr) else url_attr) or str(o0)
        url_attr = getattr(output, "url", None)
        return (url_attr() if callable(url_attr) else url_attr) or str(output)
    except Exception:
        return str(output)

def download_to_temp(url: str) -> str:
    fd, path = tempfile.mkstemp(suffix=".jpg")
    os.close(fd)
    urllib.request.urlretrieve(url, path)
    return path

async def send_image_by_url(m: types.Message, url: str):
    """–°–∫–∞—á–∏–≤–∞–µ–º –∏—Ç–æ–≥ –≤ temp –∏ —à–ª—ë–º –∫–∞–∫ —Ñ–∞–π–ª ‚Äî –Ω–∞–¥—ë–∂–Ω–æ –¥–ª—è Telegram."""
    path = None
    try:
        path = download_to_temp(url)
        # Telegram –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ = 10MB. –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –±–æ–ª—å—à–µ ‚Äî —É–∂–º—ë–º.
        if os.path.getsize(path) > 10 * 1024 * 1024:
            img = Image.open(path).convert("RGB")
            img.save(path, "JPEG", quality=88, optimize=True)
        await m.reply_photo(InputFile(path))
    finally:
        if path and os.path.exists(path):
            os.remove(path)

# ---------- ASYNC RESIZE ----------
async def download_and_resize_input(file_id: str, max_side: int = 1280) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ Telegram –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –ø–æ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –¥–æ max_side.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É JPG.
    """
    tg_file = await bot.get_file(file_id)
    url = tg_public_url(tg_file.file_path)

    async with aiohttp.ClientSession() as s:
        async with s.get(url) as r:
            r.raise_for_status()
            data = await r.read()

    fd, tmp_path = tempfile.mkstemp(suffix=".jpg")
    with os.fdopen(fd, "wb") as f:
        f.write(data)

    img = Image.open(tmp_path).convert("RGB")
    img.thumbnail((max_side, max_side), Image.LANCZOS)
    img.save(tmp_path, "JPEG", quality=95, optimize=True)

    return tmp_path

# ===================== PIPELINES =====================

async def run_nature_enhance_pipeline(file_id: str) -> str:
    """
    üåø Nature Enhance (–¢–û–ü-–≤–µ—Ä—Å–∏—è):
      1) async resize –≤—Ö–æ–¥–∞ (GPU‚Äësafe)
      2) Refiner #1 ‚Äî —á–∏—Å—Ç–∫–∞/–±–∞–ª–∞–Ω—Å/–¥–µ—Ç–∞–ª–∏
      3) Refiner #2 ‚Äî HDR‚Äë–¥–∏–Ω–∞–º–∏–∫–∞/–≥–ª—É–±–∏–Ω–∞/—Å–æ—á–Ω–æ—Å—Ç—å (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ)
      4) ESRGAN x4 ‚Äî –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (fallback –Ω–∞ x2 –ø—Ä–∏ OOM)
    """
    # 1) safe resize
    tmp_path = await download_and_resize_input(file_id, max_side=1280)

    # 2) Refiner pass #1 (–º—è–≥–∫–æ, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ)
    ref1_out = replicate.run(
        MODEL_REFINER,
        input={
            "image": open(tmp_path, "rb"),
            "prompt": "natural color balance, realistic contrast, preserve textures, remove artifacts"
        }
    )
    ref1_url = pick_url(ref1_out)

    # 3) Refiner pass #2 (HDR mood)
    ref2_out = replicate.run(
        MODEL_REFINER,
        input={
            "image": ref1_url,
            "prompt": "ULTRA HDR look, deep rich colors, wide dynamic range, crisp micro-contrast, vivid yet realistic"
        }
    )
    ref2_url = pick_url(ref2_out)

    # 4) ESRGAN upscale x4 —Å —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ x2 –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ VRAM
    try:
        esr_out = replicate.run(MODEL_ESRGAN, input={"image": ref2_url, "scale": 4})
    except Exception:
        esr_out = replicate.run(MODEL_ESRGAN, input={"image": ref2_url, "scale": 2})
    final_url = pick_url(esr_out)

    try:
        os.remove(tmp_path)
    except Exception:
        pass

    return final_url

def run_epic_landscape_flux(prompt_text: str) -> str:
    if not prompt_text or not prompt_text.strip():
        prompt_text = (
            "epic panoramic landscape, dramatic sky, volumetric light, ultra-detailed mountains, "
            "lush forests, cinematic composition, award-winning nature photography"
        )
    flux_out = replicate.run(MODEL_FLUX, input={"prompt": prompt_text, "prompt_upsampling": True})
    return pick_url(flux_out)

def run_ultra_hdr(_public_url_ignored: str, hint_caption: str = "") -> str:
    prompt_text = hint_caption.strip() if hint_caption else (
        "Ultra HDR nature photo of the same scene, rich dynamic range, crisp details, "
        "deep shadows, highlight recovery, realistic colors, professional photography"
    )
    flux_out = replicate.run(MODEL_FLUX, input={"prompt": prompt_text, "prompt_upsampling": True})
    flux_url = pick_url(flux_out)
    esr_out = replicate.run(MODEL_ESRGAN, input={"image": flux_url, "scale": 4})
    return pick_url(esr_out)

def run_clean_restore(public_url: str) -> str:
    swin_out = replicate.run(MODEL_SWINIR, input={"image": public_url, "jpeg": "40", "noise": "15"})
    swin_url = pick_url(swin_out)
    esr_out = replicate.run(MODEL_ESRGAN, input={"image": swin_url, "scale": 4})
    return pick_url(esr_out)

# ===================== UI / HANDLERS =====================

KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üåø Nature Enhance")],
        [KeyboardButton("üåÑ Epic Landscape Flux")],
        [KeyboardButton("üèû Ultra HDR")],
        [KeyboardButton("üì∏ Clean Restore")],
    ],
    resize_keyboard=True
)

@dp.message_handler(commands=["start"])
async def on_start(m: types.Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç ‚ú® –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ –∫–∞–¥—Ä—ã —É–ª—É—á—à–∏–º –Ω–∞ –º–∞–∫—Å–∏–º—É–º.\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∏–∂–µ, –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–¥–ª—è Flux-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤ –ø–æ–¥–ø–∏—Å–∏).",
        reply_markup=KB
    )

@dp.message_handler(lambda m: m.text in ["üåø Nature Enhance", "üåÑ Epic Landscape Flux", "üèû Ultra HDR", "üì∏ Clean Restore"])
async def on_choose(m: types.Message):
    uid = m.from_user.id
    if "Nature Enhance" in m.text:
        WAIT[uid] = {"effect": "nature"}
        await m.answer("–û–∫! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ. ‚õ∞Ô∏èüåø")
    elif "Epic Landscape Flux" in m.text:
        WAIT[uid] = {"effect": "flux"}
        await m.answer("–ü—Ä–∏—à–ª–∏ –ø–æ–¥–ø–∏—Å—å-–æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ–π–∑–∞–∂–∞ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ) ‚Äî —Å–≥–µ–Ω–µ—Ä—é –∫–∞–¥—Ä.")
    elif "Ultra HDR" in m.text:
        WAIT[uid] = {"effect": "hdr"}
        await m.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ. –ú–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –ø–æ–¥–ø–∏—Å—å ‚Äî –æ–ø–∏—à–µ—à—å —Å—Ü–µ–Ω—É, —É—Å–∏–ª—é –µ—ë –≤ —Å—Ç–∏–ª–µ HDR.")
    elif "Clean Restore" in m.text:
        WAIT[uid] = {"effect": "clean"}
        await m.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ. –£–±–µ—Ä—É —à—É–º/–º—ã–ª–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä—É—é.")

@dp.message_handler(content_types=["photo"])
async def on_photo(m: types.Message):
    uid = m.from_user.id
    state = WAIT.get(uid)
    if not state:
        await m.reply("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –∏ –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=KB)
        return

    effect = state.get("effect")
    caption = (m.caption or "").strip()

    await m.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    try:
        # Nature Enhance ‚Äî async –ø–∞–π–ø–ª–∞–π–Ω (–í–ê–ñ–ù–û: await!)
        if effect == "nature":
            out_url = await run_nature_enhance_pipeline(m.photo[-1].file_id)
        elif effect == "flux":
            out_url = run_epic_landscape_flux(prompt_text=caption)
        elif effect == "hdr":
            # –§–æ—Ç–æ —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º; —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫—É
            out_url = run_ultra_hdr("", hint_caption=caption)
        elif effect == "clean":
            public_url = await telegram_file_to_public_url(m.photo[-1].file_id)
            out_url = run_clean_restore(public_url)
        else:
            raise RuntimeError("Unknown effect")

        await send_image_by_url(m, out_url)

    except Exception:
        tb = traceback.format_exc(limit=20)
        await m.reply(f"üî• –û—à–∏–±–∫–∞ {effect}:\n```\n{tb}\n```", parse_mode="Markdown")
    finally:
        WAIT.pop(uid, None)

# –¢–µ–∫—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è Flux –±–µ–∑ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=["text"])
async def on_text(m: types.Message):
    uid = m.from_user.id
    state = WAIT.get(uid)
    if not state or state.get("effect") != "flux":
        return
    prompt = m.text.strip()
    await m.reply("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ–π–∑–∞–∂ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é...")
    try:
        out_url = run_epic_landscape_flux(prompt_text=prompt)
        await send_image_by_url(m, out_url)
    except Exception:
        tb = traceback.format_exc(limit=20)
        await m.reply(f"üî• –û—à–∏–±–∫–∞ flux:\n```\n{tb}\n```", parse_mode="Markdown")
    finally:
        WAIT.pop(uid, None)

if __name__ == "__main__":
    print(">> Starting polling...")
    executor.start_polling(dp, skip_updates=True)
