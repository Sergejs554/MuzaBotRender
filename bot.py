import os
import logging
from io import BytesIO

import cv2
import numpy as np
import mediapipe as mp

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ user_id
user_state = {}

# ---------- –ú–ï–ù–Æ ----------
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üì∏ Make It Special"), KeyboardButton("üåø Nature Inspire"))

make_it_special_menu = ReplyKeyboardMarkup(resize_keyboard=True)
make_it_special_menu.add(
    KeyboardButton("üíñ InstaShine"),
    KeyboardButton("üíé Beauty Sculpt"),
    KeyboardButton("üß¥ Skin Retouch"),
    KeyboardButton("üé® Artistic Tone"),
    KeyboardButton("üí´ Light Balance"),
    KeyboardButton("üß† SmartAI Correction"),
    KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"),
)

nature_inspire_menu = ReplyKeyboardMarkup(resize_keyboard=True)
nature_inspire_menu.add(
    KeyboardButton("üåÑ HDRI Landscape"),
    KeyboardButton("üåø Natural Boost"),
    KeyboardButton("üåÖ Sunset Amplify"),
    KeyboardButton("ü™Ñ Dream Colors"),
    KeyboardButton("üåà Dynamic Sky"),
    KeyboardButton("üß† SmartAI Enhance"),
    KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"),
)

# ---------- –ë–ê–ó–û–í–´–ï –•–≠–ù–î–õ–ï–†–´ ----------
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –ú—É–∑–∞ üí´\n–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "üì∏ Make It Special")
async def make_it_special(message: types.Message):
    await message.answer("–í—ã–±—Ä–∞–Ω–æ: AI Face Magic üíñ", reply_markup=make_it_special_menu)

@dp.message_handler(lambda m: m.text == "üåø Nature Inspire")
async def nature_inspire(message: types.Message):
    await message.answer("–í—ã–±—Ä–∞–Ω–æ: AI Scene Enhance üåø", reply_markup=nature_inspire_menu)

@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

# ---------- –ü–†–û–ú–ü–¢–´ –î–õ–Ø –≠–§–§–ï–ö–¢–û–í ----------
@dp.message_handler(lambda m: m.text == "üíñ InstaShine")
async def insta_shine_prompt(message: types.Message):
    user_state[message.from_user.id] = "insta_shine"
    await message.answer("üíñ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è InstaShine ‚Äî —Ç–æ–ø–æ–≤—ã–π Insta‚ÄëGlow —ç—Ñ—Ñ–µ–∫—Ç.")

@dp.message_handler(lambda m: m.text == "üíé Beauty Sculpt")
async def beauty_sculpt_prompt(message: types.Message):
    user_state[message.from_user.id] = "beauty_sculpt"
    await message.answer("üíé –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è Beauty Sculpt ‚Äî –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–µ AI‚Äë—É–ª—É—á—à–µ–Ω–∏–µ —á–µ—Ä—Ç –ª–∏—Ü–∞.")

@dp.message_handler(lambda m: m.text == "üß¥ Skin Retouch")
async def skin_retouch_prompt(message: types.Message):
    user_state[message.from_user.id] = "skin_retouch"
    await message.answer("üß¥ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è Skin Retouch ‚Äî –º—è–≥–∫–∞—è —Ä–µ—Ç—É—à—å –±–µ–∑ ¬´–º—ã–ª–∞¬ª.")

@dp.message_handler(lambda m: m.text == "üé® Artistic Tone")
async def artistic_tone_prompt(message: types.Message):
    user_state[message.from_user.id] = "art_tone"
    await message.answer("üé® –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è Artistic Tone ‚Äî –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ç–æ–Ω.")

@dp.message_handler(lambda m: m.text == "üåÑ HDRI Landscape")
async def hdri_landscape_prompt(message: types.Message):
    user_state[message.from_user.id] = "hdri_landscape"
    await message.answer("üåÑ –ü—Ä–∏—à–ª–∏ –ø–µ–π–∑–∞–∂ ‚Äî —Å–¥–µ–ª–∞—é –º–∏–∫—Ä–æ‚ÄëHDR —Å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–π –¥–µ—Ç–∞–ª—å—é.")

# ---------- –£–¢–ò–õ–ò–¢–´ –î–õ–Ø AI‚Äë–ê–ù–ê–õ–ò–ó–ê ----------
mp_face = mp.solutions.face_mesh

def face_hull_mask(img_bgr):
    """–û–≤–∞–ª –ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º FaceMesh (–≤—ã–ø—É–∫–ª–∞—è –æ–±–æ–ª–æ—á–∫–∞), –∫—Ä–∞—è —Å–ª–µ–≥–∫–∞ –ø–æ–¥—Ä–µ–∑–∞–µ–º."""
    h, w = img_bgr.shape[:2]
    img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)
    with mp_face.FaceMesh(static_image_mode=True, refine_landmarks=True, max_num_faces=1) as fm:
        res = fm.process(img_rgb)

    mask = np.zeros((h, w), dtype=np.uint8)
    if not res.multi_face_landmarks:
        return mask

    pts = np.array(
        [[int(lm.x * w), int(lm.y * h)] for lm in res.multi_face_landmarks[0].landmark],
        dtype=np.int32
    )
    hull = cv2.convexHull(pts)
    cv2.fillConvexPoly(mask, hull, 255)
    mask = cv2.erode(mask, cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (15, 15)), iterations=1)
    return mask

def feather(mask, sigma=7):
    return cv2.GaussianBlur(mask, (0, 0), sigma) if sigma > 0 else mask

def blend(src, dst, mask, feather_sigma=8):
    m = feather(mask, feather_sigma).astype(np.float32) / 255.0
    m = m[..., None]
    return (src.astype(np.float32)*(1-m) + dst.astype(np.float32)*m).clip(0,255).astype(np.uint8)

def s_curve(img, strength=0.25):
    lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
    L, A, B = cv2.split(lab)
    x = np.arange(256, dtype=np.float32) / 255.0
    y = 1/(1+np.exp(-(x-0.5)*8*strength))
    y = (y - y.min()) / (y.max()-y.min())
    lut = (y*255).clip(0,255).astype(np.uint8)
    L2 = cv2.LUT(L, lut)
    return cv2.cvtColor(cv2.merge([L2, A, B]), cv2.COLOR_LAB2BGR)

# --- AI‚ÄëGlow –¥–ª—è InstaShine (—Å –∞–Ω–∞–ª–∏–∑–æ–º –±–ª–∏–∫–æ–≤ + –ª–∏—Ü–∞) ---
def luminance_L(img_bgr):
    lab = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2LAB)
    L, _, _ = cv2.split(lab)
    return L

def adaptive_bloom(img_bgr, face_mask):
    L = luminance_L(img_bgr)
    p = np.percentile(L[L > 0], 85 if L.mean() > 120 else 80)
    highlight = (L >= p).astype(np.uint8) * 255

    if face_mask is not None and face_mask.sum() > 0:
        mask = cv2.bitwise_and(highlight, face_mask)
    else:
        mask = highlight

    big_blur = cv2.GaussianBlur(img_bgr, (0, 0), 9)
    bloom = cv2.addWeighted(img_bgr, 0.60, big_blur, 0.40, 6)

    avgL = L.mean()
    if avgL > 150:   strength = 0.22
    elif avgL > 120: strength = 0.28
    elif avgL > 90:  strength = 0.33
    else:            strength = 0.38

    mixed = blend(img_bgr, cv2.addWeighted(img_bgr, 1-strength, bloom, strength, 0), mask, feather_sigma=10)
    return mixed

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è Beauty Sculpt ---
def ring_from_mask(mask, inner=18, outer=30):
    """–ö–æ–Ω—Ç—É—Ä–Ω–æ–µ –∫–æ–ª—å—Ü–æ –≤–æ–∫—Ä—É–≥ –æ–≤–∞–ª–∞ –ª–∏—Ü–∞ (–¥–ª—è –º—è–≥–∫–æ–≥–æ ¬´—Å–∫—É–ª—å–ø—Ç–∞¬ª –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É)."""
    k_out = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (outer, outer))
    k_in  = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (inner, inner))
    dil = cv2.dilate(mask, k_out, iterations=1)
    ero = cv2.erode(mask, k_in, iterations=1)
    ring = cv2.subtract(dil, ero)
    return ring

def unsharp(img, amount=0.6, sigma=1.2):
    blur = cv2.GaussianBlur(img, (0,0), sigma)
    return cv2.addWeighted(img, 1+amount, blur, -amount, 0)

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ----------
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    state = user_state.get(user_id)

    if not state:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —ç—Ñ—Ñ–µ–∫—Ç –∏–∑ –º–µ–Ω—é.")
        return

    photo = message.photo[-1]
    f = await photo.download(destination=BytesIO())
    f.seek(0)
    np_arr = np.frombuffer(f.read(), np.uint8)
    img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

    try:
        if state == "insta_shine":
            # AI‚Äë–∞–Ω–∞–ª–∏–∑ –ª–∏—Ü–∞ + –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π glow –ø–æ –±–ª–∏–∫–∞–º
            face_mask = face_hull_mask(img)
            base = img.copy()
            if face_mask.sum() > 0:
                pre = cv2.bilateralFilter(base, 7, 80, 80)
                base = blend(base, pre, face_mask, feather_sigma=6)

            glow = adaptive_bloom(base, face_mask if face_mask.sum() > 0 else None)
            out = s_curve(glow, strength=0.18)

            path = f"insta_shine_{user_id}.jpg"
            cv2.imwrite(path, out)
            await message.answer_photo(InputFile(path), caption="üíñ InstaShine –≥–æ—Ç–æ–≤!")
            os.remove(path)

        elif state == "beauty_sculpt":
            # === –¢–æ–ø–æ–≤—ã–π Beauty Sculpt —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º AI‚Äë–∞–Ω–∞–ª–∏–∑–æ–º ===
            face_mask = face_hull_mask(img)
            if face_mask.sum() == 0:
                await message.answer("üëÄ –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ, —Å —Ö–æ—Ä–æ—à–∏–º —Å–≤–µ—Ç–æ–º.")
            else:
                # 1) –ú—è–≥–∫–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∫–æ–∂–∏ –≤–Ω—É—Ç—Ä–∏ –ª–∏—Ü–∞ (edge‚Äëpreserving)
                smooth = cv2.bilateralFilter(img, 13, 140, 140)
                skin_base = blend(img, smooth, face_mask, feather_sigma=8)

                # 2) –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–≤–µ—Ç–∞: —Ä–∞–±–æ—Ç–∞–µ–º –≤ LAB, –ª–æ–∫–∞–ª—å–Ω–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º L (–∞–Ω—Ç–∏‚Äë–ø–µ—Ä–µ—Å–≤–µ—Ç/–∞–Ω—Ç–∏‚Äë–ø—Ä–æ–≤–∞–ª)
                lab = cv2.cvtColor(skin_base, cv2.COLOR_BGR2LAB)
                L, A, B = cv2.split(lab)
                illum = cv2.GaussianBlur(L, (0,0), 21)                   # –æ—Ü–µ–Ω–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è
                L_corr = cv2.addWeighted(L, 0.85, illum, -0.15, 10)      # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é
                L_corr = cv2.createCLAHE(clipLimit=2.2, tileGridSize=(8,8)).apply(L_corr)  # –º–∏–∫—Ä–æ‚Äë–∫–æ–Ω—Ç—Ä–∞—Å—Ç –±–µ–∑ –∫–ª–∏–ø–∞
                sculpt_light = cv2.cvtColor(cv2.merge([L_corr, A, B]), cv2.COLOR_LAB2BGR)

                # 3) –ö–æ–Ω—Ç—É—Ä–Ω—ã–π ¬´—Å–∫—É–ª—å–ø—Ç¬ª: –ª—ë–≥–∫–∞—è —Ä–µ–∑–∫–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É –æ–≤–∞–ª–∞ + –Ω–æ—Å/—á–µ–ª—é—Å—Ç—å –ø–æ –∫–æ–ª—å—Ü—É
                ring = ring_from_mask(face_mask, inner=16, outer=28)
                sharp_face = unsharp(sculpt_light, amount=0.45, sigma=1.0)
                sculpted = blend(sculpt_light, sharp_face, ring, feather_sigma=12)

                # 4) –¢–æ–Ω–∫–∞—è —Ç–æ–Ω–∞–ª—å–Ω–∞—è –ø–ª–∞—Å—Ç–∏–∫–∞: —Å–ª–µ–≥–∫–∞ –ø–æ–¥–∂–∞—Ç—å —Ö–∞–π–ª–∞–π—Ç—ã, –ø—Ä–∏–ø–æ–¥–Ω—è—Ç—å —Ç–µ–Ω–∏ –≤–Ω—É—Ç—Ä–∏ –ª–∏—Ü–∞
                L2 = luminance_L(sculpted).astype(np.float32)
                p_hi = np.percentile(L2[face_mask>0], 85)
                p_lo = np.percentile(L2[face_mask>0], 30)
                hi_mask = ((L2 >= p_hi) & (face_mask>0)).astype(np.uint8)*255
                lo_mask = ((L2 <= p_lo) & (face_mask>0)).astype(np.uint8)*255

                # —Ö–∞–π–ª–∞–π—Ç—ã —á—É—Ç—å –≤–Ω–∏–∑ (—á—Ç–æ–±—ã –Ω–µ ¬´–ø–ª–∞—Å—Ç–∏–∫¬ª), —Ç–µ–Ω–∏ ‚Äî —Å–ª–µ–≥–∫–∞ –≤–≤–µ—Ä—Ö
                down_hi = cv2.convertScaleAbs(sculpted, alpha=0.98, beta=-3)
                up_lo   = cv2.convertScaleAbs(sculpted, alpha=1.03, beta=6)
                sculpted = blend(sculpted, down_hi, hi_mask, feather_sigma=10)
                sculpted = blend(sculpted, up_lo,  lo_mask, feather_sigma=10)

                # 5) –§–∏–Ω–∞–ª—å–Ω–∞—è S‚Äë–∫—Ä–∏–≤–∞—è –æ—á–µ–Ω—å –¥–µ–ª–∏–∫–∞—Ç–Ω–æ
                out = s_curve(sculpted, strength=0.16)

                path = f"beauty_sculpt_{user_id}.jpg"
                cv2.imwrite(path, out)
                await message.answer_photo(InputFile(path), caption="üíé Beauty Sculpt ‚Äî –æ–±—ä—ë–º, —Å–≤–µ—Ç –∏ —á–∏—Å—Ç–∞—è –∫–æ–∂–∞ –±–µ–∑ –ø–µ—Ä–µ—Å–≤–µ—Ç–∞.")
                os.remove(path)

        elif state == "skin_retouch":
            # –ö–∞–∫ –±—ã–ª–æ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞—é
            mask = face_hull_mask(img)
            if mask.sum() == 0:
                await message.answer("üëÄ –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ, —Å —Ö–æ—Ä–æ—à–∏–º —Å–≤–µ—Ç–æ–º.")
            else:
                smoothed = cv2.bilateralFilter(img, 9, 120, 120)
                high = cv2.subtract(img, cv2.GaussianBlur(img, (0,0), 3))
                detail_keep = cv2.addWeighted(smoothed, 1.0, high, 0.15, 0)
                out = blend(img, detail_keep, mask, feather_sigma=9)
                path = f"skin_retouch_{user_id}.jpg"
                cv2.imwrite(path, out)
                await message.answer_photo(InputFile(path), caption="üß¥ –ì–æ—Ç–æ–≤–æ! –ú—è–≥–∫–∞—è —Ä–µ—Ç—É—à—å –±–µ–∑ ¬´–º—ã–ª–∞¬ª.")
                os.remove(path)

        elif state == "art_tone":
            # –ö–∞–∫ –±—ã–ª–æ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞—é
            toned = s_curve(img, strength=0.3)
            wb = toned.astype(np.int16)
            wb[..., 2] = np.clip(wb[..., 2] + 12, 0, 255)   # +R
            wb[..., 0] = np.clip(wb[..., 0] - 8, 0, 255)    # -B
            wb = wb.astype(np.uint8)
            h, w = wb.shape[:2]
            y, x = np.ogrid[:h, :w]
            cy, cx = h/2, w/2
            vign = ((x-cx)**2 + (y-cy)**2) / (max(h,w)**2)
            vign = (1 - 0.35*vign).clip(0.65, 1.0).astype(np.float32)
            vign = cv2.GaussianBlur(vign, (0,0), max(h,w)*0.02)
            out = (wb.astype(np.float32) * vign[..., None]).clip(0,255).astype(np.uint8)
            path = f"art_tone_{user_id}.jpg"
            cv2.imwrite(path, out)
            await message.answer_photo(InputFile(path), caption="üé® –ì–æ—Ç–æ–≤–æ! –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ç–æ–Ω –ø—Ä–∏–º–µ–Ω—ë–Ω.")
            os.remove(path)

        elif state == "hdri_landscape":
            # –ö–∞–∫ –±—ã–ª–æ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞—é
            lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
            L,A,B = cv2.split(lab)
            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
            L2 = clahe.apply(L)
            base = cv2.cvtColor(cv2.merge([L2,A,B]), cv2.COLOR_LAB2BGR)
            detail = cv2.detailEnhance(base, sigma_s=12, sigma_r=0.15)
            out = cv2.addWeighted(base, 0.6, detail, 0.4, 0)
            path = f"hdri_{user_id}.jpg"
            cv2.imwrite(path, out)
            await message.answer_photo(InputFile(path), caption="üåÑ –ì–æ—Ç–æ–≤–æ! HDRI‚Äë—É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
            os.remove(path)

        else:
            await message.answer("–≠—Ñ—Ñ–µ–∫—Ç –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π.")

    finally:
        user_state.pop(user_id, None)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
