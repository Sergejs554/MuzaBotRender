# bot.py ‚Äî Nature Inspire: (2.0) Clarity-only –∏ WOW Enhance —Å –∫—Ä—É—Ç–∏–ª–∫–æ–π
# env: TELEGRAM_API_TOKEN, REPLICATE_API_TOKEN

import os, logging, tempfile, urllib.request, traceback
import numpy as np
from PIL import Image, ImageFilter, ImageOps, ImageEnhance, ImageChops
import replicate
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

# ---------- TOKENS ----------
API_TOKEN  = os.getenv("TELEGRAM_API_TOKEN")
REPL_TOKEN = os.getenv("REPLICATE_API_TOKEN")
if not API_TOKEN:
    raise RuntimeError("TELEGRAM_API_TOKEN missing")
if not REPL_TOKEN:
    raise RuntimeError("REPLICATE_API_TOKEN missing")
os.environ["REPLICATE_API_TOKEN"] = REPL_TOKEN

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ---------- MODELS ----------
# Nature Enhance 2.0 = Clarity Upscaler (–∫–∞–∫ –±—ã–ª–æ)
MODEL_CLARITY = "philz1337x/clarity-upscaler:dfad41707589d68ecdccd1dfa600d55a208f9310748e44bfe35b4a6291453d5e"

# ---------- TUNABLES ----------
INPUT_MAX_SIDE       = 1536                 # —Ä–µ—Å–∞–π–∑ –ø–µ—Ä–µ–¥ –º–æ–¥–µ–ª—è–º–∏ Replicate
FINAL_TELEGRAM_LIMIT = 10 * 1024 * 1024     # 10MB

# Clarity (–∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ, –±–µ—Ä–µ–∂–Ω—ã–µ)
CL_SCALE_FACTOR      = 2
CL_DYNAMIC           = 6.0
CL_CREATIVITY        = 0.25
CL_RESEMBLANCE       = 0.65
CL_TILING_W          = 112
CL_TILING_H          = 144
CL_STEPS             = 22
CL_SD_MODEL          = "juggernaut_reborn.safetensors [338b85bc4f]"
CL_SCHEDULER         = "DPM++ 3M SDE Karras"
CL_LORA_MORE_DETAILS = 0.50
CL_LORA_RENDER       = 1.00
CL_NEGATIVE          = "(worst quality, low quality, normal quality:2) JuggernautNegative-neg"

# WOW ‚Äî —É—Ä–æ–≤–Ω–∏ —Å–∏–ª—ã (–∫–Ω–æ–ø–∫–∏: –ù–∏–∑–∫–∞—è/–°—Ä–µ–¥–Ω—è—è/–í—ã—Å–æ–∫–∞—è)
WOW_LEVEL_LOW    = 1.3
WOW_LEVEL_MED    = 1.6
WOW_LEVEL_HIGH   = 1.9   # –ø—Ä–æ—Å–∏–ª 1.1 ‚Äî —Å–¥–µ–ª–∞–ª —Ç–∞–∫

# –ë–∞–∑–∞ ¬´–≤–∞—É¬ª-—ç—Ñ—Ñ–µ–∫—Ç–∞ (–º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å –≤—Ä—É—á–Ω—É—é)
WOW_BASE = {
    "vibrance_gain":   0.18,   # —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º ¬´–≤–∏–±—Ä–∞–Ω—Å–∞¬ª (—â–∞–¥—è—â–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å)
    "contrast_gain":   0.10,   # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    "brightness_gain": 0.04,   # –æ–±—â–∏–π —Å–≤–µ—Ç
    "curve_amount":    0.18,   # S-–∫—Ä–∏–≤–∞—è (–ø–ª—ë–Ω–æ—á–Ω–∞—è)
    "log_a":           2.8,    # –ª–æ–≥-—Ç–æ–Ω–º–∞–ø (HDR) ‚Äî —á–µ–º –≤—ã—à–µ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ
    "microcontrast":   0.22,   # –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç (high-pass blend)
    "blur_radius":     1.6,    # –±–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å –≥–∞—É—Å—Å–∞ –¥–ª—è high-pass
    "unsharp_percent": 110     # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π Unsharp
}

# ---------- STATE ----------
# user_id -> {'effect': 'ne2'|'wow_menu'|'wow', 'strength': float}
WAIT = {}

# ---------- HELPERS ----------
def tg_public_url(file_path: str) -> str:
    return f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"

async def download_tg_photo(file_id: str) -> str:
    tg_file = await bot.get_file(file_id)
    url = tg_public_url(tg_file.file_path)
    fd, path = tempfile.mkstemp(suffix=".jpg"); os.close(fd)
    urllib.request.urlretrieve(url, path)
    return path

def resize_inplace(path: str, max_side: int):
    try:
        img = Image.open(path)
        img = ImageOps.exif_transpose(img).convert("RGB")
        if max(img.size) > max_side:
            img.thumbnail((max_side, max_side), Image.LANCZOS)
        img.save(path, "JPEG", quality=95, optimize=True)
    except Exception:
        pass

def download_to_temp(url: str) -> str:
    fd, path = tempfile.mkstemp(suffix=".png"); os.close(fd)
    urllib.request.urlretrieve(url, path)
    return path

def ensure_size_under_telegram_limit(path: str, max_bytes: int = FINAL_TELEGRAM_LIMIT) -> str:
    try:
        if os.path.getsize(path) <= max_bytes:
            return path
        img = Image.open(path).convert("RGB")
        q = 92
        for _ in range(10):
            fd, tmp = tempfile.mkstemp(suffix=".jpg"); os.close(fd)
            img.save(tmp, "JPEG", quality=q, optimize=True)
            if os.path.getsize(tmp) <= max_bytes:
                try: os.remove(path)
                except: pass
                return tmp
            os.remove(tmp); q -= 8
        fd, tmp = tempfile.mkstemp(suffix=".jpg"); os.close(fd)
        img.save(tmp, "JPEG", quality=max(q, 40), optimize=True)
        try: os.remove(path)
        except: pass
        return tmp
    except Exception:
        return path

def pick_first_url(output) -> str:
    try:
        if isinstance(output, str):
            return output
        if isinstance(output, (list, tuple)) and output:
            o0 = output[0]
            url_attr = getattr(o0, "url", None)
            return url_attr() if callable(url_attr) else (url_attr or str(o0))
        url_attr = getattr(output, "url", None)
        return url_attr() if callable(url_attr) else (url_attr or str(output))
    except Exception:
        return str(output)

# ---------- WOW PIPELINE (–ª–æ–∫–∞–ª—å–Ω—ã–π) ----------
def _vibrance(img_arr: np.ndarray, gain: float) -> np.ndarray:
    # ¬´–≤–∏–±—Ä–∞–Ω—Å¬ª: —É—Å–∏–ª–∏–≤–∞–µ–º –Ω–∏–∑–∫–æ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Å–∏–ª—å–Ω–µ–µ
    mx = img_arr.max(axis=-1, keepdims=True)
    mn = img_arr.min(axis=-1, keepdims=True)
    sat = mx - mn                               # 0..1
    w = 1.0 - sat                               # —Å–µ—Ä—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–∏–π –±—É—Å—Ç
    mean = img_arr.mean(axis=-1, keepdims=True)
    # –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞, —á—Ç–æ–±—ã –Ω–µ —É–≤–æ–¥–∏—Ç—å –±–∞–ª–∞–Ω—Å
    boost = 1.0 + gain * w
    out = mean + (img_arr - mean) * boost
    return np.clip(out, 0.0, 1.0)

def _s_curve(x: np.ndarray, amt: float) -> np.ndarray:
    # –ø–ª–∞–≤–Ω–∞—è S-–∫—Ä–∏–≤–∞—è: mix –ª–∏–Ω–µ–π–Ω–æ–≥–æ –∏ smoothstep
    y = x*(1-amt) + (3*x*x - 2*x*x*x)*amt
    return np.clip(y, 0.0, 1.0)

def wow_enhance_path(orig_path: str, strength: float) -> str:
    """
    WOW: –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π ¬´–≤–∞—É¬ª –±–µ–∑ –ø–ª–∞—Å—Ç–∏–∫–∞. –í—Å—ë –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º strength.
    """
    s = float(strength)
    base = Image.open(orig_path).convert("RGB")
    base = ImageOps.exif_transpose(base)

    # –≤ numpy
    arr = np.asarray(base).astype(np.float32) / 255.0

    # 1) –ª—ë–≥–∫–∏–π HDR-—Ç–æ–Ω–º–∞–ø (–ª–æ–≥ –ø–æ –ª—É–º–µ)
    l = 0.2627*arr[...,0] + 0.6780*arr[...,1] + 0.0593*arr[...,2]
    a = max(1.0, WOW_BASE["log_a"] * s)
    y = np.log1p(a*l) / (np.log1p(a) + 1e-8)
    ratio = y / np.maximum(l, 1e-6)
    arr = np.clip(arr * ratio[...,None], 0.0, 1.0)

    # 2) S-–∫—Ä–∏–≤–∞—è (–∫–∏–Ω–æ—à–Ω–∞—è –≥–ª—É–±–∏–Ω–∞)
    arr = _s_curve(arr, amt= WOW_BASE["curve_amount"] * s)

    # 3) Vibrance (—â–∞–¥—è—â–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å)
    arr = _vibrance(arr, gain= WOW_BASE["vibrance_gain"] * s)

    # 4) –ö–æ–Ω—Ç—Ä–∞—Å—Ç/—è—Ä–∫–æ—Å—Ç—å
    arr = np.clip(arr, 0.0, 1.0)
    im = Image.fromarray((arr*255).astype(np.uint8))
    im = ImageEnhance.Contrast(im).enhance(1.0 + WOW_BASE["contrast_gain"] * s)
    im = ImageEnhance.Brightness(im).enhance(1.0 + WOW_BASE["brightness_gain"] * s)

    # 5) –õ–æ–∫–∞–ª—å–Ω—ã–π ¬´–∫–ª–∞—Ä–∏—Ç–∏¬ª (high-pass)
    blur_r = WOW_BASE["blur_radius"] + 2.2*s
    blurred = im.filter(ImageFilter.GaussianBlur(radius=blur_r))
    hp = ImageChops.subtract(im, blurred)
    hp = hp.filter(ImageFilter.UnsharpMask(radius=1.0, percent=int(90 + 80*s), threshold=3))
    im = Image.blend(im, hp, min(0.5, WOW_BASE["microcontrast"] * s))

    # 6) –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—à–∞—Ä–ø
    im = im.filter(ImageFilter.UnsharpMask(radius=1.0, percent=int(WOW_BASE["unsharp_percent"] * s), threshold=2))

    fd, out_path = tempfile.mkstemp(suffix=".jpg"); os.close(fd)
    im.save(out_path, "JPEG", quality=95, optimize=True)
    return out_path

# ---------- PIPELINES ----------
async def run_nature_enhance_v2_clarity_only(file_id: str) -> str:
    """
    Nature Enhance 2.0 ‚Äî –∫–∞–∫ –±—ã–ª–æ: CLARITY UPSCALER —Å LoRA, –±–µ–∑ –¥–æ–ø. —à–∞–≥–æ–≤.
    """
    local_in = await download_tg_photo(file_id)
    resize_inplace(local_in, INPUT_MAX_SIDE)

    prompt_text = (
        "masterpiece, best quality, highres,\n"
        f"<lora:more_details:{CL_LORA_MORE_DETAILS}>\n"
        f"<lora:SDXLrender_v2.0:{CL_LORA_RENDER}>"
    )
    try:
        with open(local_in, "rb") as f:
            out = replicate.run(
                MODEL_CLARITY,
                input={
                    "image": f,
                    "prompt": prompt_text,
                    "negative_prompt": CL_NEGATIVE,
                    "scale_factor": CL_SCALE_FACTOR,
                    "dynamic": CL_DYNAMIC,
                    "creativity": CL_CREATIVITY,
                    "resemblance": CL_RESEMBLANCE,
                    "tiling_width": CL_TILING_W,
                    "tiling_height": CL_TILING_H,
                    "sd_model": CL_SD_MODEL,
                    "scheduler": CL_SCHEDULER,
                    "num_inference_steps": CL_STEPS,
                    "seed": 1337,
                    "downscaling": False,
                    "sharpen": 0,
                    "handfix": "disabled",
                    "output_format": "png",
                }
            )
        url = pick_first_url(out)
        out_path = download_to_temp(url)
    finally:
        try: os.remove(local_in)
        except: pass

    return out_path

async def run_wow(file_id: str, strength: float) -> str:
    local_in = await download_tg_photo(file_id)
    resize_inplace(local_in, INPUT_MAX_SIDE)
    try:
        out_path = wow_enhance_path(local_in, strength=strength)
    finally:
        try: os.remove(local_in)
        except: pass
    return out_path

# ---------- UI ----------
KB_MAIN = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üåø Nature Enhance 2.0")],
        [KeyboardButton("üåø WOW Enhance")],
    ],
    resize_keyboard=True
)

KB_STRENGTH = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        [KeyboardButton("–ù–∏–∑–∫–∞—è"), KeyboardButton("–°—Ä–µ–¥–Ω—è—è"), KeyboardButton("–í—ã—Å–æ–∫–∞—è")],
    ],
    resize_keyboard=True
)

@dp.message_handler(commands=["start"])
async def on_start(m: types.Message):
    await m.answer(
        "Nature Inspire üåø\n"
        "‚Ä¢ Nature Enhance 2.0 ‚Äî Clarity Upscaler (–∫–∞–∫ –±—ã–ª–æ)\n"
        "‚Ä¢ WOW Enhance ‚Äî —Å–æ—á–Ω–æ—Å—Ç—å+–≥–ª—É–±–∏–Ω–∞ (—Å –∫—Ä—É—Ç–∏–ª–∫–æ–π —Å–∏–ª—ã)\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º.",
        reply_markup=KB_MAIN
    )

@dp.message_handler(lambda m: m.text in ["üåø Nature Enhance 2.0", "üåø WOW Enhance"])
async def on_choose_mode(m: types.Message):
    uid = m.from_user.id
    if "WOW" in m.text:
        WAIT[uid] = {"effect": "wow_menu"}
        await m.answer("–í—ã–±–µ—Ä–∏ —Å–∏–ª—É —ç—Ñ—Ñ–µ–∫—Ç–∞:", reply_markup=KB_STRENGTH)
    else:
        WAIT[uid] = {"effect": "ne2"}
        await m.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ ‚Äî —Å–¥–µ–ª–∞—é Nature Enhance 2.0 üåø", reply_markup=KB_MAIN)

@dp.message_handler(lambda m: m.text in ["–ù–∏–∑–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–í—ã—Å–æ–∫–∞—è", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
async def on_strength(m: types.Message):
    uid = m.from_user.id
    st = WAIT.get(uid)
    if not st:
        return
    if m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        WAIT.pop(uid, None)
        await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=KB_MAIN)
        return

    strength = WOW_LEVEL_MED
    if m.text == "–ù–∏–∑–∫–∞—è":  strength = WOW_LEVEL_LOW
    if m.text == "–í—ã—Å–æ–∫–∞—è": strength = WOW_LEVEL_HIGH

    WAIT[uid] = {"effect": "wow", "strength": float(strength)}
    await m.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ ‚Äî —Å–¥–µ–ª–∞—é WOW Enhance üåø", reply_markup=KB_MAIN)

@dp.message_handler(content_types=["photo"])
async def on_photo(m: types.Message):
    uid = m.from_user.id
    st = WAIT.get(uid)
    if not st or st.get("effect") not in ["ne2", "wow"]:
        await m.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º ‚¨áÔ∏è", reply_markup=KB_MAIN)
        return

    await m.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    try:
        if st["effect"] == "ne2":
            out_path = await run_nature_enhance_v2_clarity_only(m.photo[-1].file_id)
        else:
            out_path = await run_wow(m.photo[-1].file_id, strength=float(st.get("strength", WOW_LEVEL_MED)))

        safe = ensure_size_under_telegram_limit(out_path)
        await m.reply_photo(InputFile(safe))
        try:
            if os.path.exists(out_path): os.remove(out_path)
            if safe != out_path and os.path.exists(safe): os.remove(safe)
        except: pass
    except Exception:
        tb = traceback.format_exc(limit=20)
        await m.reply(f"üî• –û—à–∏–±–∫–∞ Nature Inspire:\n```\n{tb}\n```", parse_mode="Markdown")
    finally:
        WAIT.pop(uid, None)

if __name__ == "__main__":
    print(">> Starting polling‚Ä¶")
    executor.start_polling(dp, skip_updates=True)
