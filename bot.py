# bot.py ‚Äî Nature Inspire (Replicate) ‚Äî Refiner + Swin2SR x4 (—Ñ–ª–∞–≥–º–∞–Ω)
# env: TELEGRAM_API_TOKEN, REPLICATE_API_TOKEN

import os
import logging
import replicate
import asyncio
import traceback
import urllib.request
import tempfile
from io import BytesIO
from PIL import Image

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

# ---------- TOKENS ----------
API_TOKEN  = os.getenv("TELEGRAM_API_TOKEN")
REPL_TOKEN = os.getenv("REPLICATE_API_TOKEN")
if not API_TOKEN:
    raise RuntimeError("TELEGRAM_API_TOKEN")
if not REPL_TOKEN:
    raise RuntimeError("REPLICATE_API_TOKEN")
os.environ["REPLICATE_API_TOKEN"] = REPL_TOKEN

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ---------- MODELS ----------
# FLUX –∏ –ø—Ä–æ—á–µ–µ –æ—Å—Ç–∞–≤–∏–ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–ø–¥–µ–π—Ç ‚Äî Nature Enhance
MODEL_FLUX      = "black-forest-labs/flux-1.1-pro"
MODEL_REFINER   = "fermatresearch/magic-image-refiner:507ddf6f977a7e30e46c0daefd30de7d563c72322f9e4cf7cbac52ef0f667b13"
MODEL_SWIN2SR   = "mv-lab/swin2sr:a01b0512004918ca55d02e554914a9eca63909fa83a29ff0f115c78a7045574f"  # x4 SR

# (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã)
MODEL_ESRGAN    = "nightmareai/real-esrgan:f121d640bd286e1fdc67f9799164c1d5be36ff74576ee11c803ae5b665dd46aa"
MODEL_SWINIR    = "jingyunliang/swinir:660d922d33153019e8c263a3bba265de882e7f4f70396546b6c9c8f9d47a021a"

# ---------- STATE ----------
WAIT = {}  # user_id -> {'effect': 'nature'|'flux'|'hdr'|'clean'}

# ---------- HELPERS ----------
def tg_public_url(file_path: str) -> str:
    return f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"

async def telegram_file_to_public_url(file_id: str) -> str:
    tg_file = await bot.get_file(file_id)
    return tg_public_url(tg_file.file_path)

def pick_url(output) -> str:
    try:
        if isinstance(output, str):
            return output
        if isinstance(output, (list, tuple)) and output:
            o0 = output[0]
            # —É —Ä–∞–∑–Ω—ã—Ö SDK .url ‚Äî —Å–≤–æ–π—Å—Ç–≤–æ –∏–ª–∏ –º–µ—Ç–æ–¥
            url_attr = getattr(o0, "url", None)
            if callable(url_attr):
                return str(url_attr())
            if url_attr:
                return str(url_attr)
            return str(o0)
        url_attr = getattr(output, "url", None)
        if callable(url_attr):
            return str(url_attr())
        if url_attr:
            return str(url_attr)
        return str(output)
    except Exception:
        return str(output)

def download_to_temp(url: str) -> str:
    fd, path = tempfile.mkstemp(suffix=".jpg")
    os.close(fd)
    urllib.request.urlretrieve(url, path)
    return path

def ensure_photo_size_under_telegram_limit(path: str, max_bytes: int = 10 * 1024 * 1024) -> str:
    """
    Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É photo ~10MB.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ ‚Äî –ø–µ—Ä–µ–∂–∏–º–∞–µ–º –≤ JPEG —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —Å–Ω–∏–∂–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞.
    """
    try:
        if os.path.getsize(path) <= max_bytes:
            return path
        img = Image.open(path).convert("RGB")
        q = 92
        for _ in range(10):
            tmp_fd, tmp_path = tempfile.mkstemp(suffix=".jpg")
            os.close(tmp_fd)
            img.save(tmp_path, "JPEG", quality=q, optimize=True)
            if os.path.getsize(tmp_path) <= max_bytes:
                try:
                    os.remove(path)
                except Exception:
                    pass
                return tmp_path
            os.remove(tmp_path)
            q -= 8
        # –µ—Å–ª–∏ –Ω–µ —É–ª–æ–∂–∏–ª–∏—Å—å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º q
        final_fd, final_path = tempfile.mkstemp(suffix=".jpg")
        os.close(final_fd)
        img.save(final_path, "JPEG", quality=max(q, 40), optimize=True)
        try:
            os.remove(path)
        except Exception:
            pass
        return final_path
    except Exception:
        # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –≤–µ—Ä–Ω—ë–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å (–º–æ–∂–µ—Ç –ø–æ–≤–µ–∑—ë—Ç)
        return path

async def send_image_by_url(m: types.Message, url: str):
    """
    –ù–∞–¥—ë–∂–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: –∫–∞—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —à–ª—ë–º –∫–∞–∫ —Ñ–∞–π–ª (–æ–±—Ö–æ–¥ ¬´Failed to get http url content¬ª).
    –ü–ª—é—Å —Å–∂–∞—Ç–∏–µ, –µ—Å–ª–∏ >10MB.
    """
    path = None
    try:
        path = download_to_temp(url)
        path = ensure_photo_size_under_telegram_limit(path)
        await m.reply_photo(InputFile(path))
    finally:
        if path and os.path.exists(path):
            try:
                os.remove(path)
            except Exception:
                pass

async def download_and_resize_input(file_id: str, max_side: int = 1536) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –≤—Ö–æ–¥ –∏–∑ TG –∏ –º—è–≥–∫–æ —É–º–µ–Ω—å—à–∞–µ–º –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–ø–æ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ),
    —á—Ç–æ–±—ã –Ω–µ —É–ø–∏—Ä–∞—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã GPU –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Replicate –∏ —É—Å–∫–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.
    """
    public_url = await telegram_file_to_public_url(file_id)
    fd, path = tempfile.mkstemp(suffix=".jpg")
    os.close(fd)
    urllib.request.urlretrieve(public_url, path)

    try:
        img = Image.open(path).convert("RGB")
        w, h = img.size
        if max(w, h) > max_side:
            img.thumbnail((max_side, max_side), Image.LANCZOS)
            img.save(path, "JPEG", quality=95, optimize=True)
    except Exception:
        pass
    return path

# ===================== PIPELINES =====================

def run_nature_enhance_refiner_only(public_url: str) -> str:
    """
    –õ—ë–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞/–±–∞–ª–∞–Ω—Å –æ—Ç Refiner ‚Äî –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—ã.
    """
    ref_inputs = {
        "image": public_url,
        # –º—è–≥–∫–∏–π –ø—Ä–æ–º–ø—Ç: —É–±—Ä–∞—Ç—å –º—É—Ç–Ω–æ—Å—Ç—å/–≥—Ä—è–∑—å, –Ω–µ —Ç–µ—Ä—è—è –¥–µ—Ç–∞–ª–µ–π
        "prompt": "subtle clarity, realistic color balance, preserve fine textures, no extra objects, no oversharpen"
    }
    ref_out = replicate.run(MODEL_REFINER, input=ref_inputs)
    return pick_url(ref_out)

def run_swin2sr_x4(public_url: str) -> str:
    """
    Swin2SR —Å—É–ø–µ—Ä‚Äë—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (x4) ‚Äî –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–¥–∞—ë—Ç x4, –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Å—à—Ç–∞–±–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç.
    """
    sr_out = replicate.run(MODEL_SWIN2SR, input={"image": public_url})
    return pick_url(sr_out)

def run_nature_enhance_pipeline(file_id: str) -> str:
    """
    –ù–û–í–´–ô Nature Enhance = (–≤—Ö–æ–¥ TG) ‚Üí –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ—Å–∞–π–∑ ‚Üí Refiner (–ª—ë–≥–∫–∏–π) ‚Üí Swin2SR (x4).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL.
    """
    # 1) —Å–∫–∞—á–∞–ª–∏ –∏ ¬´–æ–±–µ–∑–æ–ø–∞—Å–∏–ª–∏¬ª —Ä–∞–∑–º–µ—Ä
    tmp_path = asyncio.get_event_loop().run_until_complete(download_and_resize_input(file_id, 1536))

    try:
        # –∑–∞–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ Refiner –Ω–∞–ø—Ä—è–º—É—é (SDK —Å–∞–º –∑–∞–≥—Ä—É–∑–∏—Ç —Ñ–∞–π–ª)
        ref_url = run_nature_enhance_refiner_only(tmp_path)

        # 2) Swin2SR (x4) ‚Äî –≥–ª–∞–≤–Ω–æ–µ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        sr_url = run_swin2sr_x4(ref_url)
        return sr_url
    finally:
        try:
            os.remove(tmp_path)
        except Exception:
            pass

# (–æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç—Ñ—Ñ–µ–∫—Ç—ã ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π; –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å, –µ—Å–ª–∏ –º–µ—à–∞—é—Ç)
def run_epic_landscape_flux(prompt_text: str) -> str:
    if not prompt_text or not prompt_text.strip():
        prompt_text = (
            "epic panoramic landscape, dramatic sky, volumetric light, ultra-detailed mountains, "
            "lush forests, cinematic composition, award-winning nature photography"
        )
    flux_out = replicate.run(MODEL_FLUX, input={"prompt": prompt_text, "prompt_upsampling": True})
    return pick_url(flux_out)

def run_ultra_hdr(_public_url_ignored: str, hint_caption: str = "") -> str:
    prompt_text = hint_caption.strip() if hint_caption else (
        "Ultra HDR nature photo of the same scene, rich dynamic range, crisp details, "
        "deep shadows, highlight recovery, realistic colors, professional photography"
    )
    flux_out = replicate.run(MODEL_FLUX, input={"prompt": prompt_text, "prompt_upsampling": True})
    return pick_url(flux_out)

def run_clean_restore(public_url: str) -> str:
    swin_out = replicate.run(MODEL_SWINIR, input={"image": public_url, "jpeg": "40", "noise": "15"})
    return pick_url(swin_out)

# ===================== UI / HANDLERS =====================

KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üåø Nature Enhance")],
        [KeyboardButton("üåÑ Epic Landscape Flux")],
        [KeyboardButton("üèû Ultra HDR")],
        [KeyboardButton("üì∏ Clean Restore")],
    ],
    resize_keyboard=True
)

@dp.message_handler(commands=["start"])
async def on_start(m: types.Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç ‚ú® –ü—Ä–∏—Ä–æ–¥—É —É—Å–∏–ª–∏–º –ø–æ —Ñ–ª–∞–≥–º–∞–Ω—Å–∫–æ–π —Å—Ö–µ–º–µ (Refiner + Swin2SR x4).\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∏–∂–µ –∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–¥–ª—è Flux –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç).",
        reply_markup=KB
    )

@dp.message_handler(lambda m: m.text in ["üåø Nature Enhance", "üåÑ Epic Landscape Flux", "üèû Ultra HDR", "üì∏ Clean Restore"])
async def on_choose(m: types.Message):
    uid = m.from_user.id
    if "Nature Enhance" in m.text:
        WAIT[uid] = {"effect": "nature"}
        await m.answer("–û–∫! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ. ‚õ∞Ô∏èüåø")
    elif "Epic Landscape Flux" in m.text:
        WAIT[uid] = {"effect": "flux"}
        await m.answer("–ü—Ä–∏—à–ª–∏ –ø–æ–¥–ø–∏—Å—å-–æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ–π–∑–∞–∂–∞ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ) ‚Äî —Å–≥–µ–Ω–µ—Ä—é –∫–∞–¥—Ä.")
    elif "Ultra HDR" in m.text:
        WAIT[uid] = {"effect": "hdr"}
        await m.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ. –ú–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –ø–æ–¥–ø–∏—Å—å ‚Äî –æ–ø–∏—à–µ—à—å —Å—Ü–µ–Ω—É, —É—Å–∏–ª—é –µ—ë –≤ —Å—Ç–∏–ª–µ HDR.")
    elif "Clean Restore" in m.text:
        WAIT[uid] = {"effect": "clean"}
        await m.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ. –£–±–µ—Ä—É —à—É–º/–º—ã–ª–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ.")

@dp.message_handler(content_types=["photo"])
async def on_photo(m: types.Message):
    uid = m.from_user.id
    state = WAIT.get(uid)
    if not state:
        await m.reply("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –∏ –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=KB)
        return

    effect = state.get("effect")
    caption = (m.caption or "").strip()

    await m.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    try:
        if effect == "nature":
            out_url = run_nature_enhance_pipeline(m.photo[-1].file_id)
            await send_image_by_url(m, out_url)
        elif effect == "flux":
            out_url = run_epic_landscape_flux(prompt_text=caption)
            await send_image_by_url(m, out_url)
        elif effect == "hdr":
            out_url = run_ultra_hdr("", hint_caption=caption)
            await send_image_by_url(m, out_url)
        elif effect == "clean":
            public_url = await telegram_file_to_public_url(m.photo[-1].file_id)
            out_url = run_clean_restore(public_url)
            await send_image_by_url(m, out_url)
        else:
            await m.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º.")
    except Exception:
        tb = traceback.format_exc(limit=20)
        await m.reply(f"üî• –û—à–∏–±–∫–∞ {effect}:\n```\n{tb}\n```", parse_mode="Markdown")
    finally:
        WAIT.pop(uid, None)

# –¢–µ–∫—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è Flux –±–µ–∑ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=["text"])
async def on_text(m: types.Message):
    uid = m.from_user.id
    state = WAIT.get(uid)
    if not state or state.get("effect") != "flux":
        return
    prompt = m.text.strip()
    await m.reply("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ–π–∑–∞–∂ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é...")
    try:
        out_url = run_epic_landscape_flux(prompt_text=prompt)
        await send_image_by_url(m, out_url)
    except Exception:
        tb = traceback.format_exc(limit=20)
        await m.reply(f"üî• –û—à–∏–±–∫–∞ flux:\n```\n{tb}\n```", parse_mode="Markdown")
    finally:
        WAIT.pop(uid, None)

if __name__ == "__main__":
    print(">> Starting polling...")
    executor.start_polling(dp, skip_updates=True)
